/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from "mongoose";

/**
 * Lean version of StudentAttendanceDateDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `StudentAttendanceDocument.toObject()`.
 * ```
 * const studentattendanceObject = studentattendance.toObject();
 * ```
 */
export type StudentAttendanceDate = {
  year: number;
  day: number;
  month: number;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of StudentAttendanceDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `StudentAttendanceDocument.toObject()`. To avoid conflicts with model names, use the type alias `StudentAttendanceObject`.
 * ```
 * const studentattendanceObject = studentattendance.toObject();
 * ```
 */
export type StudentAttendance = {
  program: string;
  uuid: string;
  date: StudentAttendanceDate;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of StudentAttendanceDocument (type alias of `StudentAttendance`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { StudentAttendance } from "../models"
 * import { StudentAttendanceObject } from "../interfaces/mongoose.gen.ts"
 *
 * const studentattendanceObject: StudentAttendanceObject = studentattendance.toObject();
 * ```
 */
export type StudentAttendanceObject = StudentAttendance;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type StudentAttendanceQuery = mongoose.Query<
  any,
  StudentAttendanceDocument,
  StudentAttendanceQueries
> &
  StudentAttendanceQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `StudentAttendanceSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type StudentAttendanceQueries = {};

export type StudentAttendanceMethods = {};

export type StudentAttendanceStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const StudentAttendance = mongoose.model<StudentAttendanceDocument, StudentAttendanceModel>("StudentAttendance", StudentAttendanceSchema);
 * ```
 */
export type StudentAttendanceModel = mongoose.Model<
  StudentAttendanceDocument,
  StudentAttendanceQueries
> &
  StudentAttendanceStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new StudentAttendance schema instances:
 * ```
 * const StudentAttendanceSchema: StudentAttendanceSchema = new mongoose.Schema({ ... })
 * ```
 */
export type StudentAttendanceSchema = mongoose.Schema<
  StudentAttendanceDocument,
  StudentAttendanceModel,
  StudentAttendanceMethods,
  StudentAttendanceQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const StudentAttendance = mongoose.model<StudentAttendanceDocument, StudentAttendanceModel>("StudentAttendance", StudentAttendanceSchema);
 * ```
 */
export type StudentAttendanceDateDocument =
  mongoose.Document<mongoose.Types.ObjectId> & {
    year: number;
    day: number;
    month: number;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const StudentAttendance = mongoose.model<StudentAttendanceDocument, StudentAttendanceModel>("StudentAttendance", StudentAttendanceSchema);
 * ```
 */
export type StudentAttendanceDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  StudentAttendanceQueries
> &
  StudentAttendanceMethods & {
    program: string;
    uuid: string;
    date: StudentAttendanceDateDocument;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of VolunteerAttendanceDateDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `VolunteerAttendanceDocument.toObject()`.
 * ```
 * const volunteerattendanceObject = volunteerattendance.toObject();
 * ```
 */
export type VolunteerAttendanceDate = {
  year: number;
  date: number;
  month: number;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of VolunteerAttendanceDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `VolunteerAttendanceDocument.toObject()`. To avoid conflicts with model names, use the type alias `VolunteerAttendanceObject`.
 * ```
 * const volunteerattendanceObject = volunteerattendance.toObject();
 * ```
 */
export type VolunteerAttendance = {
  program: string;
  uuid: string;
  date: VolunteerAttendanceDate;
  startTime: number;
  endTime: number;
  hours?: number;
  note?: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of VolunteerAttendanceDocument (type alias of `VolunteerAttendance`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { VolunteerAttendance } from "../models"
 * import { VolunteerAttendanceObject } from "../interfaces/mongoose.gen.ts"
 *
 * const volunteerattendanceObject: VolunteerAttendanceObject = volunteerattendance.toObject();
 * ```
 */
export type VolunteerAttendanceObject = VolunteerAttendance;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type VolunteerAttendanceQuery = mongoose.Query<
  any,
  VolunteerAttendanceDocument,
  VolunteerAttendanceQueries
> &
  VolunteerAttendanceQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `VolunteerAttendanceSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type VolunteerAttendanceQueries = {};

export type VolunteerAttendanceMethods = {};

export type VolunteerAttendanceStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const VolunteerAttendance = mongoose.model<VolunteerAttendanceDocument, VolunteerAttendanceModel>("VolunteerAttendance", VolunteerAttendanceSchema);
 * ```
 */
export type VolunteerAttendanceModel = mongoose.Model<
  VolunteerAttendanceDocument,
  VolunteerAttendanceQueries
> &
  VolunteerAttendanceStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new VolunteerAttendance schema instances:
 * ```
 * const VolunteerAttendanceSchema: VolunteerAttendanceSchema = new mongoose.Schema({ ... })
 * ```
 */
export type VolunteerAttendanceSchema = mongoose.Schema<
  VolunteerAttendanceDocument,
  VolunteerAttendanceModel,
  VolunteerAttendanceMethods,
  VolunteerAttendanceQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const VolunteerAttendance = mongoose.model<VolunteerAttendanceDocument, VolunteerAttendanceModel>("VolunteerAttendance", VolunteerAttendanceSchema);
 * ```
 */
export type VolunteerAttendanceDateDocument =
  mongoose.Document<mongoose.Types.ObjectId> & {
    year: number;
    date: number;
    month: number;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const VolunteerAttendance = mongoose.model<VolunteerAttendanceDocument, VolunteerAttendanceModel>("VolunteerAttendance", VolunteerAttendanceSchema);
 * ```
 */
export type VolunteerAttendanceDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  VolunteerAttendanceQueries
> &
  VolunteerAttendanceMethods & {
    program: string;
    uuid: string;
    date: VolunteerAttendanceDateDocument;
    startTime: number;
    endTime: number;
    hours?: number;
    note?: string;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of ProgramsVolunteering_hourDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ProgramsDocument.toObject()`.
 * ```
 * const programsObject = programs.toObject();
 * ```
 */
export type ProgramsVolunteering_hour = {
  total: number;
  weekly: number[];
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of ProgramsLocationDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ProgramsDocument.toObject()`.
 * ```
 * const programsObject = programs.toObject();
 * ```
 */
export type ProgramsLocation = {
  loc_type: "physical" | "virtual";
  common_name?: string;
  address?: string;
  city?: string;
  state?: string;
  zip?: string;
  link?: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of ProgramsCourseDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ProgramsDocument.toObject()`.
 * ```
 * const programsObject = programs.toObject();
 * ```
 */
export type ProgramsCourse = {
  id: number;
  name: string;
  duration: number;
  available: number[];
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of ProgramsContactDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ProgramsDocument.toObject()`.
 * ```
 * const programsObject = programs.toObject();
 * ```
 */
export type ProgramsContact = {
  name: {
    first: string;
    last: string;
  };
  phone: string;
  email: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of ProgramsEnrollmentDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ProgramsDocument.toObject()`.
 * ```
 * const programsObject = programs.toObject();
 * ```
 */
export type ProgramsEnrollment = {
  volunteers: string[];
  students: string[];
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of ProgramsDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ProgramsDocument.toObject()`. To avoid conflicts with model names, use the type alias `ProgramsObject`.
 * ```
 * const programsObject = programs.toObject();
 * ```
 */
export type Programs = {
  id: string;
  name: string;
  program_type: string;
  volunteering_hours: ProgramsVolunteering_hour;
  location: ProgramsLocation;
  schedule: {
    type: {
      dayCount: number;
      date: number;
      month: number;
      year: number;
      start: number;
      end: number;
    }[];
    required?: any;
  }[];
  courses: ProgramsCourse[];
  contact: ProgramsContact;
  admins: string[];
  enrollments: ProgramsEnrollment;
  active: boolean[];
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of ProgramsDocument (type alias of `Programs`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Programs } from "../models"
 * import { ProgramsObject } from "../interfaces/mongoose.gen.ts"
 *
 * const programsObject: ProgramsObject = programs.toObject();
 * ```
 */
export type ProgramsObject = Programs;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type ProgramsQuery = mongoose.Query<
  any,
  ProgramsDocument,
  ProgramsQueries
> &
  ProgramsQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `ProgramsSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type ProgramsQueries = {};

export type ProgramsMethods = {};

export type ProgramsStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Programs = mongoose.model<ProgramsDocument, ProgramsModel>("Programs", ProgramsSchema);
 * ```
 */
export type ProgramsModel = mongoose.Model<ProgramsDocument, ProgramsQueries> &
  ProgramsStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Programs schema instances:
 * ```
 * const ProgramsSchema: ProgramsSchema = new mongoose.Schema({ ... })
 * ```
 */
export type ProgramsSchema = mongoose.Schema<
  ProgramsDocument,
  ProgramsModel,
  ProgramsMethods,
  ProgramsQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Programs = mongoose.model<ProgramsDocument, ProgramsModel>("Programs", ProgramsSchema);
 * ```
 */
export type ProgramsVolunteering_hourDocument =
  mongoose.Document<mongoose.Types.ObjectId> & {
    total: number;
    weekly: mongoose.Types.Array<number>;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Programs = mongoose.model<ProgramsDocument, ProgramsModel>("Programs", ProgramsSchema);
 * ```
 */
export type ProgramsLocationDocument =
  mongoose.Document<mongoose.Types.ObjectId> & {
    loc_type: "physical" | "virtual";
    common_name?: string;
    address?: string;
    city?: string;
    state?: string;
    zip?: string;
    link?: string;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Mongoose Subdocument type
 *
 * Type of `ProgramsDocument["courses"]` element.
 */
export type ProgramsCourseDocument =
  mongoose.Types.Subdocument<mongoose.Types.ObjectId> & {
    id: number;
    name: string;
    duration: number;
    available: mongoose.Types.Array<number>;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Programs = mongoose.model<ProgramsDocument, ProgramsModel>("Programs", ProgramsSchema);
 * ```
 */
export type ProgramsContactDocument =
  mongoose.Document<mongoose.Types.ObjectId> & {
    name: {
      first: string;
      last: string;
    };
    phone: string;
    email: string;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Programs = mongoose.model<ProgramsDocument, ProgramsModel>("Programs", ProgramsSchema);
 * ```
 */
export type ProgramsEnrollmentDocument =
  mongoose.Document<mongoose.Types.ObjectId> & {
    volunteers: mongoose.Types.Array<string>;
    students: mongoose.Types.Array<string>;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Programs = mongoose.model<ProgramsDocument, ProgramsModel>("Programs", ProgramsSchema);
 * ```
 */
export type ProgramsDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  ProgramsQueries
> &
  ProgramsMethods & {
    id: string;
    name: string;
    program_type: string;
    volunteering_hours: ProgramsVolunteering_hourDocument;
    location: ProgramsLocationDocument;
    schedule: mongoose.Types.Array<{
      type: mongoose.Types.Array<{
        dayCount: number;
        date: number;
        month: number;
        year: number;
        start: number;
        end: number;
      }>;
      required?: any;
    }>;
    courses: mongoose.Types.DocumentArray<ProgramsCourseDocument>;
    contact: ProgramsContactDocument;
    admins: mongoose.Types.Array<string>;
    enrollments: ProgramsEnrollmentDocument;
    active: mongoose.Types.Array<boolean>;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of VolunteerSignupsDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `VolunteerSignupsDocument.toObject()`. To avoid conflicts with model names, use the type alias `VolunteerSignupsObject`.
 * ```
 * const volunteersignupsObject = volunteersignups.toObject();
 * ```
 */
export type VolunteerSignups = {
  uuid: string;
  program: string;
  courses: number[];
  weeks: number[];
  instructorInterest: boolean;
  skills?: string;
  id: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of VolunteerSignupsDocument (type alias of `VolunteerSignups`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { VolunteerSignups } from "../models"
 * import { VolunteerSignupsObject } from "../interfaces/mongoose.gen.ts"
 *
 * const volunteersignupsObject: VolunteerSignupsObject = volunteersignups.toObject();
 * ```
 */
export type VolunteerSignupsObject = VolunteerSignups;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type VolunteerSignupsQuery = mongoose.Query<
  any,
  VolunteerSignupsDocument,
  VolunteerSignupsQueries
> &
  VolunteerSignupsQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `VolunteerSignupsSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type VolunteerSignupsQueries = {};

export type VolunteerSignupsMethods = {};

export type VolunteerSignupsStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const VolunteerSignups = mongoose.model<VolunteerSignupsDocument, VolunteerSignupsModel>("VolunteerSignups", VolunteerSignupsSchema);
 * ```
 */
export type VolunteerSignupsModel = mongoose.Model<
  VolunteerSignupsDocument,
  VolunteerSignupsQueries
> &
  VolunteerSignupsStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new VolunteerSignups schema instances:
 * ```
 * const VolunteerSignupsSchema: VolunteerSignupsSchema = new mongoose.Schema({ ... })
 * ```
 */
export type VolunteerSignupsSchema = mongoose.Schema<
  VolunteerSignupsDocument,
  VolunteerSignupsModel,
  VolunteerSignupsMethods,
  VolunteerSignupsQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const VolunteerSignups = mongoose.model<VolunteerSignupsDocument, VolunteerSignupsModel>("VolunteerSignups", VolunteerSignupsSchema);
 * ```
 */
export type VolunteerSignupsDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  VolunteerSignupsQueries
> &
  VolunteerSignupsMethods & {
    uuid: string;
    program: string;
    courses: mongoose.Types.Array<number>;
    weeks: mongoose.Types.Array<number>;
    instructorInterest: boolean;
    skills?: string;
    id: string;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of PasswordResetRequestsDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `PasswordResetRequestsDocument.toObject()`. To avoid conflicts with model names, use the type alias `PasswordResetRequestsObject`.
 * ```
 * const passwordresetrequestsObject = passwordresetrequests.toObject();
 * ```
 */
export type PasswordResetRequests = {
  email: string;
  token: string;
  createdAt?: Date;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of PasswordResetRequestsDocument (type alias of `PasswordResetRequests`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { PasswordResetRequests } from "../models"
 * import { PasswordResetRequestsObject } from "../interfaces/mongoose.gen.ts"
 *
 * const passwordresetrequestsObject: PasswordResetRequestsObject = passwordresetrequests.toObject();
 * ```
 */
export type PasswordResetRequestsObject = PasswordResetRequests;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type PasswordResetRequestsQuery = mongoose.Query<
  any,
  PasswordResetRequestsDocument,
  PasswordResetRequestsQueries
> &
  PasswordResetRequestsQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `PasswordResetRequestsSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type PasswordResetRequestsQueries = {};

export type PasswordResetRequestsMethods = {};

export type PasswordResetRequestsStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const PasswordResetRequests = mongoose.model<PasswordResetRequestsDocument, PasswordResetRequestsModel>("PasswordResetRequests", PasswordResetRequestsSchema);
 * ```
 */
export type PasswordResetRequestsModel = mongoose.Model<
  PasswordResetRequestsDocument,
  PasswordResetRequestsQueries
> &
  PasswordResetRequestsStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new PasswordResetRequests schema instances:
 * ```
 * const PasswordResetRequestsSchema: PasswordResetRequestsSchema = new mongoose.Schema({ ... })
 * ```
 */
export type PasswordResetRequestsSchema = mongoose.Schema<
  PasswordResetRequestsDocument,
  PasswordResetRequestsModel,
  PasswordResetRequestsMethods,
  PasswordResetRequestsQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const PasswordResetRequests = mongoose.model<PasswordResetRequestsDocument, PasswordResetRequestsModel>("PasswordResetRequests", PasswordResetRequestsSchema);
 * ```
 */
export type PasswordResetRequestsDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  PasswordResetRequestsQueries
> &
  PasswordResetRequestsMethods & {
    email: string;
    token: string;
    createdAt?: Date;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of SessionsDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `SessionsDocument.toObject()`. To avoid conflicts with model names, use the type alias `SessionsObject`.
 * ```
 * const sessionsObject = sessions.toObject();
 * ```
 */
export type Sessions = {
  token: string;
  uuid: string;
  expires: number;
  role: "parent" | "student" | "volunteer";
  createdAt?: Date;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of SessionsDocument (type alias of `Sessions`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Sessions } from "../models"
 * import { SessionsObject } from "../interfaces/mongoose.gen.ts"
 *
 * const sessionsObject: SessionsObject = sessions.toObject();
 * ```
 */
export type SessionsObject = Sessions;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type SessionsQuery = mongoose.Query<
  any,
  SessionsDocument,
  SessionsQueries
> &
  SessionsQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `SessionsSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type SessionsQueries = {};

export type SessionsMethods = {};

export type SessionsStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Sessions = mongoose.model<SessionsDocument, SessionsModel>("Sessions", SessionsSchema);
 * ```
 */
export type SessionsModel = mongoose.Model<SessionsDocument, SessionsQueries> &
  SessionsStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Sessions schema instances:
 * ```
 * const SessionsSchema: SessionsSchema = new mongoose.Schema({ ... })
 * ```
 */
export type SessionsSchema = mongoose.Schema<
  SessionsDocument,
  SessionsModel,
  SessionsMethods,
  SessionsQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Sessions = mongoose.model<SessionsDocument, SessionsModel>("Sessions", SessionsSchema);
 * ```
 */
export type SessionsDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  SessionsQueries
> &
  SessionsMethods & {
    token: string;
    uuid: string;
    expires: number;
    role: "parent" | "student" | "volunteer";
    createdAt?: Date;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of AuthCredentialsDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `AuthCredentialsDocument.toObject()`. To avoid conflicts with model names, use the type alias `AuthCredentialsObject`.
 * ```
 * const authcredentialsObject = authcredentials.toObject();
 * ```
 */
export type AuthCredentials = {
  password: string;
  email: string;
  role: "parent" | "student" | "volunteer";
  uuid: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of AuthCredentialsDocument (type alias of `AuthCredentials`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { AuthCredentials } from "../models"
 * import { AuthCredentialsObject } from "../interfaces/mongoose.gen.ts"
 *
 * const authcredentialsObject: AuthCredentialsObject = authcredentials.toObject();
 * ```
 */
export type AuthCredentialsObject = AuthCredentials;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type AuthCredentialsQuery = mongoose.Query<
  any,
  AuthCredentialsDocument,
  AuthCredentialsQueries
> &
  AuthCredentialsQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `AuthCredentialsSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type AuthCredentialsQueries = {};

export type AuthCredentialsMethods = {};

export type AuthCredentialsStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const AuthCredentials = mongoose.model<AuthCredentialsDocument, AuthCredentialsModel>("AuthCredentials", AuthCredentialsSchema);
 * ```
 */
export type AuthCredentialsModel = mongoose.Model<
  AuthCredentialsDocument,
  AuthCredentialsQueries
> &
  AuthCredentialsStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new AuthCredentials schema instances:
 * ```
 * const AuthCredentialsSchema: AuthCredentialsSchema = new mongoose.Schema({ ... })
 * ```
 */
export type AuthCredentialsSchema = mongoose.Schema<
  AuthCredentialsDocument,
  AuthCredentialsModel,
  AuthCredentialsMethods,
  AuthCredentialsQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const AuthCredentials = mongoose.model<AuthCredentialsDocument, AuthCredentialsModel>("AuthCredentials", AuthCredentialsSchema);
 * ```
 */
export type AuthCredentialsDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  AuthCredentialsQueries
> &
  AuthCredentialsMethods & {
    password: string;
    email: string;
    role: "parent" | "student" | "volunteer";
    uuid: string;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of ParentsNameDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ParentsDocument.toObject()`.
 * ```
 * const parentsObject = parents.toObject();
 * ```
 */
export type ParentsName = {
  first: string;
  last: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of ParentsEmergencyContactNameDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ParentsEmergencyContactDocument.toObject()`.
 * ```
 * const parentsemergencycontactObject = parentsemergencycontact.toObject();
 * ```
 */
export type ParentsEmergencyContactName = {
  first: string;
  last: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of ParentsEmergencyContactDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ParentsDocument.toObject()`.
 * ```
 * const parentsObject = parents.toObject();
 * ```
 */
export type ParentsEmergencyContact = {
  name: ParentsEmergencyContactName;
  email: string;
  phone: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of ParentsDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ParentsDocument.toObject()`. To avoid conflicts with model names, use the type alias `ParentsObject`.
 * ```
 * const parentsObject = parents.toObject();
 * ```
 */
export type Parents = {
  name: ParentsName;
  email: string;
  uuid: string;
  phone: string;
  linkedStudents: string[];
  emergencyContact: ParentsEmergencyContact;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of ParentsDocument (type alias of `Parents`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Parents } from "../models"
 * import { ParentsObject } from "../interfaces/mongoose.gen.ts"
 *
 * const parentsObject: ParentsObject = parents.toObject();
 * ```
 */
export type ParentsObject = Parents;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type ParentsQuery = mongoose.Query<
  any,
  ParentsDocument,
  ParentsQueries
> &
  ParentsQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `ParentsSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type ParentsQueries = {};

export type ParentsMethods = {};

export type ParentsStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Parents = mongoose.model<ParentsDocument, ParentsModel>("Parents", ParentsSchema);
 * ```
 */
export type ParentsModel = mongoose.Model<ParentsDocument, ParentsQueries> &
  ParentsStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Parents schema instances:
 * ```
 * const ParentsSchema: ParentsSchema = new mongoose.Schema({ ... })
 * ```
 */
export type ParentsSchema = mongoose.Schema<
  ParentsDocument,
  ParentsModel,
  ParentsMethods,
  ParentsQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Parents = mongoose.model<ParentsDocument, ParentsModel>("Parents", ParentsSchema);
 * ```
 */
export type ParentsNameDocument = mongoose.Document<mongoose.Types.ObjectId> & {
  first: string;
  last: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const ParentsEmergencyContact = mongoose.model<ParentsEmergencyContactDocument, ParentsEmergencyContactModel>("ParentsEmergencyContact", ParentsEmergencyContactSchema);
 * ```
 */
export type ParentsEmergencyContactNameDocument =
  mongoose.Document<mongoose.Types.ObjectId> & {
    first: string;
    last: string;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Parents = mongoose.model<ParentsDocument, ParentsModel>("Parents", ParentsSchema);
 * ```
 */
export type ParentsEmergencyContactDocument =
  mongoose.Document<mongoose.Types.ObjectId> & {
    name: ParentsEmergencyContactNameDocument;
    email: string;
    phone: string;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Parents = mongoose.model<ParentsDocument, ParentsModel>("Parents", ParentsSchema);
 * ```
 */
export type ParentsDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  ParentsQueries
> &
  ParentsMethods & {
    name: ParentsNameDocument;
    email: string;
    uuid: string;
    phone: string;
    linkedStudents: mongoose.Types.Array<string>;
    emergencyContact: ParentsEmergencyContactDocument;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of StudentsNameDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `StudentsDocument.toObject()`.
 * ```
 * const studentsObject = students.toObject();
 * ```
 */
export type StudentsName = {
  first: string;
  last: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of StudentsBirthdayDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `StudentsDocument.toObject()`.
 * ```
 * const studentsObject = students.toObject();
 * ```
 */
export type StudentsBirthday = {
  day: number;
  month: number;
  year: number;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of StudentsEnrollmentDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `StudentsDocument.toObject()`.
 * ```
 * const studentsObject = students.toObject();
 * ```
 */
export type StudentsEnrollment = {
  program: string;
  course: number;
  week: number;
  id: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of StudentsDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `StudentsDocument.toObject()`. To avoid conflicts with model names, use the type alias `StudentsObject`.
 * ```
 * const studentsObject = students.toObject();
 * ```
 */
export type Students = {
  name: StudentsName;
  uuid: string;
  birthday: StudentsBirthday;
  notes?: string;
  linkedParent: string;
  enrollments: StudentsEnrollment[];
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of StudentsDocument (type alias of `Students`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Students } from "../models"
 * import { StudentsObject } from "../interfaces/mongoose.gen.ts"
 *
 * const studentsObject: StudentsObject = students.toObject();
 * ```
 */
export type StudentsObject = Students;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type StudentsQuery = mongoose.Query<
  any,
  StudentsDocument,
  StudentsQueries
> &
  StudentsQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `StudentsSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type StudentsQueries = {};

export type StudentsMethods = {};

export type StudentsStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Students = mongoose.model<StudentsDocument, StudentsModel>("Students", StudentsSchema);
 * ```
 */
export type StudentsModel = mongoose.Model<StudentsDocument, StudentsQueries> &
  StudentsStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Students schema instances:
 * ```
 * const StudentsSchema: StudentsSchema = new mongoose.Schema({ ... })
 * ```
 */
export type StudentsSchema = mongoose.Schema<
  StudentsDocument,
  StudentsModel,
  StudentsMethods,
  StudentsQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Students = mongoose.model<StudentsDocument, StudentsModel>("Students", StudentsSchema);
 * ```
 */
export type StudentsNameDocument =
  mongoose.Document<mongoose.Types.ObjectId> & {
    first: string;
    last: string;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Students = mongoose.model<StudentsDocument, StudentsModel>("Students", StudentsSchema);
 * ```
 */
export type StudentsBirthdayDocument =
  mongoose.Document<mongoose.Types.ObjectId> & {
    day: number;
    month: number;
    year: number;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Mongoose Subdocument type
 *
 * Type of `StudentsDocument["enrollments"]` element.
 */
export type StudentsEnrollmentDocument =
  mongoose.Types.Subdocument<mongoose.Types.ObjectId> & {
    program: string;
    course: number;
    week: number;
    id: string;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Students = mongoose.model<StudentsDocument, StudentsModel>("Students", StudentsSchema);
 * ```
 */
export type StudentsDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  StudentsQueries
> &
  StudentsMethods & {
    name: StudentsNameDocument;
    uuid: string;
    birthday: StudentsBirthdayDocument;
    notes?: string;
    linkedParent: string;
    enrollments: mongoose.Types.DocumentArray<StudentsEnrollmentDocument>;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Lean version of VolunteersNameDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `VolunteersDocument.toObject()`.
 * ```
 * const volunteersObject = volunteers.toObject();
 * ```
 */
export type VolunteersName = {
  first: string;
  last: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of VolunteersBirthdayDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `VolunteersDocument.toObject()`.
 * ```
 * const volunteersObject = volunteers.toObject();
 * ```
 */
export type VolunteersBirthday = {
  month: number;
  day: number;
  year: number;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of VolunteersAssignmentCommitmentDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `VolunteersAssignmentDocument.toObject()`.
 * ```
 * const volunteersassignmentObject = volunteersassignment.toObject();
 * ```
 */
export type VolunteersAssignmentCommitment = {
  course: number;
  week: number;
  instructor?: boolean;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of VolunteersAssignmentDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `VolunteersDocument.toObject()`.
 * ```
 * const volunteersObject = volunteers.toObject();
 * ```
 */
export type VolunteersAssignment = {
  program: string;
  commitments: VolunteersAssignmentCommitment[];
  id: string;
  hours: number;
  signupNotes?: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of VolunteersDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `VolunteersDocument.toObject()`. To avoid conflicts with model names, use the type alias `VolunteersObject`.
 * ```
 * const volunteersObject = volunteers.toObject();
 * ```
 */
export type Volunteers = {
  name: VolunteersName;
  email: string;
  uuid: string;
  phone: string;
  birthday: VolunteersBirthday;
  school: string;
  admin?: number;
  pendingAssignments: string[];
  assignments: VolunteersAssignment[];
  skills?: string;
  _id: mongoose.Types.ObjectId;
};

/**
 * Lean version of VolunteersDocument (type alias of `Volunteers`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Volunteers } from "../models"
 * import { VolunteersObject } from "../interfaces/mongoose.gen.ts"
 *
 * const volunteersObject: VolunteersObject = volunteers.toObject();
 * ```
 */
export type VolunteersObject = Volunteers;

/**
 * Mongoose Query type
 *
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type VolunteersQuery = mongoose.Query<
  any,
  VolunteersDocument,
  VolunteersQueries
> &
  VolunteersQueries;

/**
 * Mongoose Query helper types
 *
 * This type represents `VolunteersSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type VolunteersQueries = {};

export type VolunteersMethods = {};

export type VolunteersStatics = {};

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Volunteers = mongoose.model<VolunteersDocument, VolunteersModel>("Volunteers", VolunteersSchema);
 * ```
 */
export type VolunteersModel = mongoose.Model<
  VolunteersDocument,
  VolunteersQueries
> &
  VolunteersStatics;

/**
 * Mongoose Schema type
 *
 * Assign this type to new Volunteers schema instances:
 * ```
 * const VolunteersSchema: VolunteersSchema = new mongoose.Schema({ ... })
 * ```
 */
export type VolunteersSchema = mongoose.Schema<
  VolunteersDocument,
  VolunteersModel,
  VolunteersMethods,
  VolunteersQueries
>;

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Volunteers = mongoose.model<VolunteersDocument, VolunteersModel>("Volunteers", VolunteersSchema);
 * ```
 */
export type VolunteersNameDocument =
  mongoose.Document<mongoose.Types.ObjectId> & {
    first: string;
    last: string;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Volunteers = mongoose.model<VolunteersDocument, VolunteersModel>("Volunteers", VolunteersSchema);
 * ```
 */
export type VolunteersBirthdayDocument =
  mongoose.Document<mongoose.Types.ObjectId> & {
    month: number;
    day: number;
    year: number;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Mongoose Subdocument type
 *
 * Type of `VolunteersAssignmentDocument["commitments"]` element.
 */
export type VolunteersAssignmentCommitmentDocument =
  mongoose.Types.Subdocument<mongoose.Types.ObjectId> & {
    course: number;
    week: number;
    instructor?: boolean;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Mongoose Subdocument type
 *
 * Type of `VolunteersDocument["assignments"]` element.
 */
export type VolunteersAssignmentDocument =
  mongoose.Types.Subdocument<mongoose.Types.ObjectId> & {
    program: string;
    commitments: mongoose.Types.DocumentArray<VolunteersAssignmentCommitmentDocument>;
    id: string;
    hours: number;
    signupNotes?: string;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Volunteers = mongoose.model<VolunteersDocument, VolunteersModel>("Volunteers", VolunteersSchema);
 * ```
 */
export type VolunteersDocument = mongoose.Document<
  mongoose.Types.ObjectId,
  VolunteersQueries
> &
  VolunteersMethods & {
    name: VolunteersNameDocument;
    email: string;
    uuid: string;
    phone: string;
    birthday: VolunteersBirthdayDocument;
    school: string;
    admin?: number;
    pendingAssignments: mongoose.Types.Array<string>;
    assignments: mongoose.Types.DocumentArray<VolunteersAssignmentDocument>;
    skills?: string;
    _id: mongoose.Types.ObjectId;
  };

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 *
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
  return doc instanceof mongoose.Document;
}

/**
 * Helper type used by `PopulatedDocument`. Returns the parent property of a string
 * representing a nested property (i.e. `friend.user` -> `friend`)
 */
type ParentProperty<T> = T extends `${infer P}.${string}` ? P : never;

/**
 * Helper type used by `PopulatedDocument`. Returns the child property of a string
 * representing a nested property (i.e. `friend.user` -> `user`).
 */
type ChildProperty<T> = T extends `${string}.${infer C}` ? C : never;

/**
 * Helper type used by `PopulatedDocument`. Removes the `ObjectId` from the general union type generated
 * for ref documents (i.e. `mongoose.Types.ObjectId | UserDocument` -> `UserDocument`)
 */
type PopulatedProperty<Root, T extends keyof Root> = Omit<Root, T> & {
  [ref in T]: Root[T] extends mongoose.Types.Array<infer U>
    ? mongoose.Types.Array<Exclude<U, mongoose.Types.ObjectId>>
    : Exclude<Root[T], mongoose.Types.ObjectId>;
};

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 *
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<DocType, T> = T extends keyof DocType
  ? PopulatedProperty<DocType, T>
  : ParentProperty<T> extends keyof DocType
  ? Omit<DocType, ParentProperty<T>> & {
      [ref in ParentProperty<T>]: DocType[ParentProperty<T>] extends mongoose.Types.Array<
        infer U
      >
        ? mongoose.Types.Array<
            ChildProperty<T> extends keyof U
              ? PopulatedProperty<U, ChildProperty<T>>
              : PopulatedDocument<U, ChildProperty<T>>
          >
        : ChildProperty<T> extends keyof DocType[ParentProperty<T>]
        ? PopulatedProperty<DocType[ParentProperty<T>], ChildProperty<T>>
        : PopulatedDocument<DocType[ParentProperty<T>], ChildProperty<T>>;
    }
  : DocType;

/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T;
type Modify<T, R> = Omit<T, keyof R> & R;

/**
 * Augment mongoose with Query.populate overloads
 */
declare module "mongoose" {
  interface Query<ResultType, DocType, THelpers = {}> {
    populate<T extends string>(
      path: T,
      select?: string | any,
      model?: string | Model<any, THelpers>,
      match?: any
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;

    populate<T extends string>(
      options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>
    ): Query<
      ResultType extends Array<DocType>
        ? Array<PopulatedDocument<Unarray<ResultType>, T>>
        : ResultType extends DocType
        ? PopulatedDocument<Unarray<ResultType>, T>
        : ResultType,
      DocType,
      THelpers
    > &
      THelpers;
  }
}
